# ──────────────────────────────────────────────────────────────────────────── #
#                               DISTRIBUTION SETTINGS                          #
# ──────────────────────────────────────────────────────────────────────────── #

# Distribution name
# Options: Debian: buster, bullseye, bookworm, trixie | Ubuntu: bionic, focal, jammy, noble
DISTRIBUTION="trixie"

# Distribution architecture (Debian 10-12 only)
# Options: amd64, i386, i386-pae
DISTRIBUTION_ARCH="amd64"

# Desktop environment
# Options: core, flux, xfce, lxqt
DESKTOP_ENVIRONMENT="xfce"

# System variant (defines the list of packages used in modules)
# Options: minimum, standard, toolbox, ultra
PACKAGE_VARIANT="standard"

# Compression type
# Options: xz, lzo, gz, lz4, zstd
COMP_TYPE="zstd"

# ──────────────────────────────────────────────────────────────────────────── #
#                                KERNEL SETTINGS                               #
# ──────────────────────────────────────────────────────────────────────────── #

# Install kernel package
# Options: true, false
INSTALL_KERNEL="true"

# Kernel flavour
# Options: none, rt, cloud
KERNEL_FLAVOUR="none"

# Kernel with AUFS support
# Options: true, false
KERNEL_AUFS="false"

# Compile additional drivers during kernel installation
# Options: true, false
KERNEL_BUILD_DKMS="true"

# ──────────────────────────────────────────────────────────────────────────── #
#                           LOCALE & TIMEZONE SETTINGS                         #
# ──────────────────────────────────────────────────────────────────────────── #

# System locale
# Options: C, en_US, ru_RU, es_ES, pt_BR
LOCALE="en_US"

# Generate locales for multiple languages as defined in the LOCALES variable
# in minioslib
# Options: true, false
MULTILINGUAL="false"

# Retain all available locales or only those specified in the LOCALES variable
# of minioslib
# Options: true, false
KEEP_LOCALES="true"

# Timezone setting
# The system will automatically detect and set the timezone based on your
# location if you have Internet access.
# Format: [any timezone]
LIVE_TIMEZONE="Etc/UTC"

# ──────────────────────────────────────────────────────────────────────────── #
#                              BOOT LOADER SETTINGS                            #
# ──────────────────────────────────────────────────────────────────────────── #

# Initramfs builder
# Options: livekit, dracut
# livekit - lightweight initramfs builder (default for Flux, usually the initrd size is almost 2x smaller)
# dracut  - dracut-based initramfs builder (default for other editions, initrd loads significantly faster)
INITRAMFS_BUILDER="dracut"

# mkdracut implementation
# Options: system, bundled
# system  - use system mkdracut from PATH
# bundled - use bundled mkdracut under linux-live/initramfs/dracut-mos
MKDRACUT_SOURCE="bundled"

# Boot loader configuration
# grub-only: Uses GRUB for both BIOS and UEFI boot
# syslinux-grub: Uses SYSLINUX to load GRUB for BIOS, GRUB for UEFI
# syslinux-native: Uses native SYSLINUX with vesamenu for BIOS, GRUB for UEFI
# Options: grub-only, syslinux-grub, syslinux-native
BOOTLOADER="syslinux-native"

# Menu language configuration
# Valid options: multilang, en_US, ru_RU, de_DE, es_ES, it_IT, id_ID, pt_BR, pt_PT, fr_FR
# multilang: menu with language selection (default)
# specific language: single language menu for both GRUB and SYSLINUX
MENU_LANG="multilang"

# Indicate the kernel version in the names of initrfs.img and vmlinuz
# Options: true, false
NAMED_BOOT_FILES="true"

# Remove unused GRUB modules to save space
# When true: Keeps only essential modules for MiniOS boot process
# When false: Keeps all GRUB modules (default behavior)
# Options: true, false
GRUB_REMOVE_UNUSED_MODULES="true"

# ──────────────────────────────────────────────────────────────────────────── #
#                         minios-live-config SETTINGS                          #
# ──────────────────────────────────────────────────────────────────────────── #

# Kernel command line passed to the system (space-separated)
LIVE_CONFIG_CMDLINE="components"

# Hostname for the system
LIVE_HOSTNAME="minios"

# Username for the system
LIVE_USERNAME="live"

# Full name for the user (optional)
LIVE_USER_FULLNAME="MiniOS Live User"

# Default user groups (comma or space-separated)
LIVE_USER_DEFAULT_GROUPS="dialout cdrom floppy audio video plugdev users fuse plugdev netdev powerdev scanner bluetooth weston-launch kvm libvirt libvirt-qemu vboxusers lpadmin dip sambashare docker wireshark"

# User password crypted
# Format: $y$[salt]$[hash]
# To generate a yescrypt ($y$...) password hash, use:
#   echo evil | mkpasswd --method=yescrypt --stdin
LIVE_USER_PASSWORD_CRYPTED='$y$j9T$ZjqXh232.8hREYixjgMNN.$ADNa7mAp.Cjky5HgjG7JioH3SxnzPLljAC0fVxPsYr6'

# User password crypted for legacy distributions (e.g. Debian 10)
# This is used for compatibility with older distributions that do not support yescrypt format.
# Format: $6$[salt]$[hash]
# To generate a SHA-512 ($6$...) password hash for legacy distributions, use:
#   echo evil | mkpasswd --method=sha-512 --stdin
LIVE_USER_PASSWORD_CRYPTED_LEGACY='$6$IrhvSrAFMg1Vdwpb$oZbHGv8LeZtA.jhq6de.D.qN2fo0IY0tVeLjSQi5Ydyj5YrtlJ3aAsjXkzmbDMP9iktZyOIgVoNdfBlLCrY9Q/'

# Root password crypted
# Format: $y$[salt]$[hash]
# To generate a yescrypt ($y$...) password hash, use:
#   echo toor | mkpasswd --method=yescrypt --stdin
LIVE_ROOT_PASSWORD_CRYPTED='$y$j9T$y6H8zml37HjzKO517qvkc.$53Ux0xA0OVHIELjgf91mMd8nr1DM.E3PSI.StCEnn4.'

# Root password crypted for legacy distributions (e.g. Debian 10)
# This is used for compatibility with older distributions that do not support yescrypt format.
# Format: $6$[salt]$[hash]
# To generate a SHA-512 ($6$...) password hash for legacy distributions, use:
#   echo toor | mkpasswd --method=sha-512 --stdin
LIVE_ROOT_PASSWORD_CRYPTED_LEGACY='$6$bnnAU51W.WLWqneN$Uip0XaJPe1/QvGtJJOPViUuNmO6qDfU1uxdo8J9OEda4hB6.0HiC5P.Bgq3NFpGrM55Br7uY/X.HspyFx9u121'

# Disable sudo/root access
# Options: true, false
LIVE_CONFIG_NOROOT=""

# Link user directories to external media
# Options: true, false
LIVE_LINK_USER_DIRS="false"

# Bind user directories to external media
# Options: true, false
LIVE_BIND_USER_DIRS="false"

# User directories path on the external media
# Format: [path]
LIVE_USER_DIRS_PATH="/minios/userdata"

# Enable debug mode for live-config
# Options: true, false
LIVE_CONFIG_DEBUG="true"

# ──────────────────────────────────────────────────────────────────────────── #
#                                initrd SETTINGS                               #
# ──────────────────────────────────────────────────────────────────────────── #

# Default systemd target
# Options: graphical, multi-user
DEFAULT_TARGET="graphical"

# Enable services (list of services to enable)
# Format: [service1,service2,service3...]
ENABLE_SERVICES="ssh"

# Disable services (list of services to disable)
# Format: [service1,service2,service3...]
DISABLE_SERVICES=""

# Create a log folder on the media for system startup logs
# Options: true, false
EXPORT_LOGS="false"

# ──────────────────────────────────────────────────────────────────────────── #
#                               BUILDER SETTINGS                               #
# ──────────────────────────────────────────────────────────────────────────── #

# Verbosity level during the build process.
# 0: Minimal output.
# 1: Verbose output.
# 2: Very verbose output.
VERBOSITY_LEVEL=1

# Save automatically generated SSH key and authorized_keys for debugging
# Options: true, false
DEBUG_SSH_KEYS="false"

# Enable setting root password during install for debugging purposes
# (by default root password is set on first boot)
# Options: true, false
DEBUG_SET_ROOT_PASSWORD="false"

# Create a secondary ISO with a constant filename
# Options: true, false
BUILD_TEST_ISO="false"

# Remove old ISO files for this build type
# Options: true, false
REMOVE_OLD_ISO="false"

# Skip installation of packages required for the build
# Options: true, false
SKIP_SETUP_HOST="false"

# Remove sources after building
# Options: true, false
REMOVE_SOURCES="false"

# Remove dpkg base from the module
# Options: true, false
REMOVE_DPKG_DB="false"

# Kernel package: modules only
# Options: true, false
KERNEL_MODULES_ONLY="true"

# Remove large icons from the build
# Options: true, false
REMOVE_LARGE_ICONS="true"

# Set the maximum level for building modules
# Options: true, false
FILTER_MODULES="false"

# Modules filter level
# Format: [0, 1, 2, 3, 4...]
FILTER_LEVEL="3"

# Build from snapshot
# Options: true, false
BUILD_FROM_SNAPSHOT="false"

# Snapshot date for the build
# Format: YYYYMMDDTHHMMSSZ
SNAPSHOT_DATE="20220630T090257Z"

# ──────────────────────────────────────────────────────────────────────────── #
#                                CACHE SETTINGS                                #
# ──────────────────────────────────────────────────────────────────────────── #

# Use a pre-made rootfs file during installation
# Options: true, false
USE_ROOTFS="true"

# Enable or disable package caching
# Options: true, false
USE_APT_CACHE="true"

# Enable or disable prepared apt cache repository
# Options: true, false
#
# Note: To use this option, you must do a full build of the distribution to
#       create the package cache.
#       You should also disable the USE_APT_CACHER option, as they conflict.
# Note: This option doesn't work without Internet yet.
USE_APT_CACHE_REPO="false"

# Enable or disable access to apt-cacher-ng
# Options: true, false
#
# Note: apt-cacher-ng must be installed and configured beforehand to use this
#       option. For more information, visit the official website:
#       https://www.unix-ag.uni-kl.de/~bloch/acng
USE_APT_CACHER="false"

# Set the address for the apt-cacher-ng proxy
# Format: IP:PORT
APT_CACHER_ADDRESS="127.0.0.1:3142"
