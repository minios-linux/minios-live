#!/bin/bash
# Build dracut-based initramfs for MiniOS

set -euo pipefail

usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS]

Options:
  -k,  --kernel <KERNEL VERSION>         Specify the kernel version (required)
  -o,  --output <OUTPUT FILE>            Output initramfs file path
  -n,  --network                         Enable network support
  -c,  --cloud                           Enable cloud support
  -d,  --debug                           Enable debug mode
  -h,  --help                            Display this help message and exit

Examples:
  $(basename "$0") --kernel 5.10.0-8-amd64
  $(basename "$0") -k 6.1.0-13-amd64 -o /boot/initrd.img -n -c

EOF
    exit 1
}

# Default parameters
KERNEL=""
OUTPUT=""
NETWORK="false"
CLOUD="false"
DEBUG="false"

# Parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
    -k | --kernel)
        KERNEL="$2"
        shift 2
        ;;
    -o | --output)
        OUTPUT="$2"
        shift 2
        ;;
    -n | --network)
        NETWORK="true"
        shift
        ;;
    -c | --cloud)
        CLOUD="true"
        shift
        ;;
    -d | --debug)
        DEBUG="true"
        shift
        ;;
    -h | --help)
        usage
        ;;
    *)
        echo "Unknown option: $1" >&2
        usage
        ;;
    esac
done

# Validate required parameters
if [ -z "$KERNEL" ]; then
    echo "E: Kernel version is required" >&2
    usage
fi

# Set default output (using non-versioned name for compatibility)
if [ -z "$OUTPUT" ]; then
    OUTPUT="/boot/initrfs.img"
fi

# Check if dracut is installed
if ! command -v dracut >/dev/null 2>&1; then
    echo "E: dracut is not installed" >&2
    echo "   Install it with: apt-get install dracut-core" >&2
    exit 1
fi

# Check if kernel modules exist
if [ ! -d "/lib/modules/$KERNEL" ]; then
    echo "E: Kernel modules not found for version $KERNEL" >&2
    exit 1
fi

# Build filesystem driver list for --add-drivers
AVAILABLE_DRIVERS=""
REQUIRED_DRIVERS="squashfs overlay loop zram ext4 vfat"
OPTIONAL_DRIVERS="aufs ntfs ntfs3 exfat"

for driver in $REQUIRED_DRIVERS $OPTIONAL_DRIVERS; do
    if modinfo -k "$KERNEL" "$driver" >/dev/null 2>&1; then
        AVAILABLE_DRIVERS="$AVAILABLE_DRIVERS $driver"
    fi
done

# Export flags for use in installkernel()
export MINIOS_CLOUD="$CLOUD"
export MINIOS_NETWORK="$NETWORK"

# Prepare dracut command
DRACUT_CMD=(
    dracut
    --force
    --kver "$KERNEL"
    --add "minios minios-cleanup"
    --add-drivers "$AVAILABLE_DRIVERS"
    --strip
    --hardlink
)

# Add debug mode
if [ "$DEBUG" = "true" ]; then
    DRACUT_CMD+=(--verbose --debug)
fi

# Add output file
DRACUT_CMD+=("$OUTPUT")

# Create output directory if needed
mkdir -p "$(dirname "$OUTPUT")"

# Display configuration
echo "Building dracut initramfs:"
echo "  Kernel: $KERNEL"
echo "  Output: $OUTPUT"
echo "  Network: $NETWORK"
echo "  Cloud: $CLOUD"
echo "  Debug: $DEBUG"
echo

# Run dracut
echo "Running dracut..."
if "${DRACUT_CMD[@]}"; then
    echo
    echo "Successfully created initramfs: $OUTPUT"
    # Don't output the path since file is already in place
    exit 0
else
    echo
    echo "E: Failed to create initramfs" >&2
    exit 1
fi
